"""
PRHandler Agent - Pushes optimised pipeline YAML to GitHub and conditionally creates a PR.
"""

import os
import logging
from github import Github, Auth
from github.GithubException import GithubException

logger = logging.getLogger(__name__)


class PRHandlerAgent:
    """
    Handles pushing optimised pipeline YAML to GitHub and optionally creating a pull request.
    """

    def __init__(self, gh_token: str | None = None):
        """
        Initialise PRHandlerAgent.

        Args:
            gh_token: GitHub token; if None, read from environment variable GITHUB_TOKEN
        """
        self.gh_token = gh_token or os.getenv("GITHUB_TOKEN")
        if not self.gh_token:
            logger.error("GITHUB_TOKEN is required for PRHandlerAgent")
            raise ValueError("GITHUB_TOKEN is required for PRHandlerAgent")

        auth = Auth.Token(self.gh_token)
        self.gh = Github(auth=auth)
        logger.info("Initialised PRHandlerAgent with provided GitHub token")

    def run(
        self,
        repo_url: str,
        optimised_yaml: str,
        base_branch: str = "main",
        pr_branch: str = "optimise-pipeline",
        file_path: str = ".github/workflows/pipeline1.yaml",
        pr_create: bool = True
    ) -> str | None:
        """
        Push optimised YAML to repo and optionally create a pull request.

        Args:
            repo_url: HTTPS URL of the repository
            optimised_yaml: YAML content to push
            base_branch: Branch to base PR on
            pr_branch: Branch to push changes to
            file_path: Path in repo to save the YAML
            pr_create: If True, create a PR; otherwise just push branch

        Returns:
            URL of created PR, or None if pr_create=False or PR already exists
        """
        logger.info("Accessing repository: %s", repo_url)

        repo_name = repo_url.split("github.com/")[-1].rstrip("/")
        repo = self.gh.get_repo(repo_name)

        base = repo.get_branch(base_branch)
        logger.info("Base branch: %s (SHA: %s)", base_branch, base.commit.sha[:7])

        # Create branch if it doesn't exist
        try:
            repo.create_git_ref(ref=f"refs/heads/{pr_branch}", sha=base.commit.sha)
            logger.info("Created new branch: %s", pr_branch)
        except GithubException as e:
            if e.status == 422:
                logger.info("Branch %s already exists", pr_branch)
            else:
                logger.warning("Branch creation issue: %s", e)

        # Update or create file
        try:
            existing_file = repo.get_contents(file_path, ref=pr_branch)
            file_sha = existing_file.sha
            logger.info("Updating existing file: %s", file_path)
        except GithubException:
            file_sha = None
            logger.info("Creating new file: %s", file_path)

        repo.update_file(
            path=file_path,
            message="Optimise CI/CD pipeline: automated improvements applied",
            content=optimised_yaml,
            sha=file_sha,
            branch=pr_branch,
        )
        logger.info("File pushed successfully: %s", file_path)

        # Optionally create PR
        if pr_create:
            open_prs = repo.get_pulls(
                state="open",
                head=f"{repo.owner.login}:{pr_branch}",
                base=base_branch
            )

            if open_prs.totalCount > 0:
                pr_url = open_prs[0].html_url
                logger.info("PR already exists: %s", pr_url)
                return pr_url

            pr = repo.create_pull(
                title="Optimise CI/CD Pipeline",
                body=(
                    "This PR applies automated optimisations to improve the CI/CD pipeline efficiency.\n\n"
                    "Changes Applied:\n"
                    "- Removed redundant steps\n"
                    "- Optimised job dependencies\n"
                    "- Improved resource utilisation\n\n"
                    "Expected Benefits:\n"
                    "- 20-30% reduction in pipeline execution time\n"
                    "- Better resource efficiency\n"
                    "- Faster feedback on code changes\n\n"
                    "This PR was automatically generated by the Pipeline Optimiser Agent."
                ),
                head=pr_branch,
                base=base_branch
            )

            pr_url = pr.html_url
            logger.info("Pull request created: %s", pr_url)
            return pr_url

        logger.info("PR creation skipped (pr_create=False)")
        return None

    # Backward-compatible alias
    create_pr = run


